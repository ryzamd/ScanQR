package com.example.scan_qr

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MethodChannel

class MainActivity : FlutterActivity() {
    private val EVENT_CHANNEL = "com.example.scan_qr/scanner"
    private val METHOD_CHANNEL = "com.example.scan_qr/scanner_method"
    private var eventSink: EventChannel.EventSink? = null
    private val handler = Handler(Looper.getMainLooper())
    
    private var isInScannerPage = false
    private var currentAppFlavor: String = ""
    
    // Th√™m bi·∫øn ƒë·ªÉ theo d√µi gi√° tr·ªã scan cu·ªëi c√πng ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    private var lastProcessedScan: String? = null
    private var lastProcessedTimestamp: Long = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // X√°c ƒë·ªãnh flavor c·ªßa ·ª©ng d·ª•ng hi·ªán t·∫°i
        currentAppFlavor = determineAppFlavor()
        Log.d("MainActivity", "üí´ MainActivity created for flavor: $currentAppFlavor")
        
        // X·ª≠ l√Ω khi ƒë∆∞·ª£c kh·ªüi ƒë·ªông b·ªüi ScanReceiver
        if (intent?.getBooleanExtra("is_from_scan_receiver", false) == true) {
            handler.postDelayed({
                processIntent(intent)
            }, 1000) // Cho 1 gi√¢y ƒë·ªÉ Flutter kh·ªüi ƒë·ªông
        }
    }

    private fun determineAppFlavor(): String {
        // X√°c ƒë·ªãnh flavor d·ª±a tr√™n package name ho·∫∑c resource values
        val packageName = applicationContext.packageName
        return when {
            packageName.endsWith(".qc") -> "QC_MANAGER"
            packageName.endsWith(".inbound") -> "WAREHOUSE_INBOUND"
            packageName.endsWith(".outbound") -> "WAREHOUSE_OUTBOUND"
            else -> "UNKNOWN"
        }
    }

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        Log.d("MainActivity", "C·∫•u h√¨nh Flutter Engine cho $currentAppFlavor")

        // Thi·∫øt l·∫≠p EventChannel ƒë·ªÉ g·ª≠i d·ªØ li·ªáu qu√©t t·ªõi Flutter
        EventChannel(flutterEngine.dartExecutor.binaryMessenger, EVENT_CHANNEL)
            .setStreamHandler(object : EventChannel.StreamHandler {
                override fun onListen(arguments: Any?, events: EventChannel.EventSink?) {
                    eventSink = events
                    Log.d("MainActivity", "EventChannel b·∫Øt ƒë·∫ßu l·∫Øng nghe cho $currentAppFlavor")
                }

                override fun onCancel(arguments: Any?) {
                    eventSink = null
                    Log.d("MainActivity", "EventChannel d·ª´ng l·∫Øng nghe cho $currentAppFlavor")
                }
            })
            
        // Thi·∫øt l·∫≠p MethodChannel ƒë·ªÉ Flutter th√¥ng b√°o khi v√†o/ra trang scanner
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, METHOD_CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "enterScanPage" -> {
                    isInScannerPage = true
                    // Reset gi√° tr·ªã l·∫ßn qu√©t cu·ªëi c√πng khi v√†o trang scan
                    lastProcessedScan = null
                    lastProcessedTimestamp = 0
                    Log.d("MainActivity", "$currentAppFlavor th√¥ng b√°o: ƒê√£ v√†o trang scanner")
                    result.success(true)
                }
                "exitScanPage" -> {
                    isInScannerPage = false
                    Log.d("MainActivity", "$currentAppFlavor th√¥ng b√°o: ƒê√£ r·ªùi trang scanner")
                    result.success(true)
                }
                else -> {
                    result.notImplemented()
                }
            }
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        Log.d("MainActivity", "$currentAppFlavor - Nh·∫≠n Intent m·ªõi: ${intent.action}")
        
        // L∆∞u v√† s·ª≠ d·ª•ng intent m·ªõi
        setIntent(intent)
        
        // Ch·ªâ x·ª≠ l√Ω intent khi ƒëang ·ªü trang scanner
        if (isInScannerPage) {
            processIntent(intent)
        } else {
            Log.d("MainActivity", "$currentAppFlavor - Kh√¥ng x·ª≠ l√Ω intent v√¨ kh√¥ng ·ªü trang scanner")
        }
    }
    
    private fun processIntent(intent: Intent) {
        // Kh√¥ng x·ª≠ l√Ω n·∫øu ƒëang kh√¥ng ·ªü trang scanner
        if (!isInScannerPage) {
            Log.d("MainActivity", "$currentAppFlavor - B·ªè qua processIntent v√¨ kh√¥ng ·ªü trang scanner")
            return
        }
        
        // Ki·ªÉm tra timestamp ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
        val timestamp = intent.getLongExtra("scan_timestamp", System.currentTimeMillis())
        if (timestamp - lastProcessedTimestamp < 1000) {
            Log.d("MainActivity", "$currentAppFlavor - B·ªè qua v√¨ qu√° g·∫ßn v·ªõi l·∫ßn qu√©t tr∆∞·ªõc")
            return
        }
        
        // Ki·ªÉm tra xem intent c√≥ d√†nh cho flavor hi·ªán t·∫°i kh√¥ng
        val targetFlavor = intent.getStringExtra("target_flavor")
        if (targetFlavor != null && targetFlavor != currentAppFlavor && targetFlavor != "ALL") {
            Log.d("MainActivity", "$currentAppFlavor - B·ªè qua intent v√¨ d√†nh cho flavor $targetFlavor")
            return
        }
        
        val scanData = intent.getStringExtra("scan_data")
        if (scanData != null) {
            // Ki·ªÉm tra xem c√≥ ph·∫£i gi√° tr·ªã tr√πng l·∫∑p kh√¥ng
            if (scanData == lastProcessedScan) {
                Log.d("MainActivity", "$currentAppFlavor - B·ªè qua d·ªØ li·ªáu tr√πng l·∫∑p: $scanData")
                return
            }
            
            Log.d("MainActivity", "$currentAppFlavor - D·ªØ li·ªáu qu√©t: $scanData")
            sendScanDataToFlutter(scanData)
            
            // L∆∞u l·∫°i gi√° tr·ªã v·ª´a x·ª≠ l√Ω ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            lastProcessedScan = scanData
            lastProcessedTimestamp = timestamp
        } else {
            Log.w("MainActivity", "$currentAppFlavor - Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu qu√©t trong intent")
            
            // T√¨m ki·∫øm trong t·∫•t c·∫£ extras n·∫øu kh√¥ng c√≥ "scan_data"
            var foundData = false
            intent.extras?.keySet()?.forEach { key ->
                if (key.contains("data", ignoreCase = true) ||
                    key.contains("barcode", ignoreCase = true) ||
                    key.contains("scan", ignoreCase = true)) {
                    
                    val value = intent.extras?.getString(key)
                    if (value is String && value.isNotEmpty()) {
                        // Ki·ªÉm tra tr√πng l·∫∑p
                        if (value != lastProcessedScan) {
                            Log.d("MainActivity", "$currentAppFlavor - T√¨m th·∫•y d·ªØ li·ªáu qu√©t trong key $key: $value")
                            sendScanDataToFlutter(value)
                            lastProcessedScan = value
                            lastProcessedTimestamp = timestamp
                            foundData = true
                            return@forEach
                        } else {
                            Log.d("MainActivity", "$currentAppFlavor - B·ªè qua d·ªØ li·ªáu tr√πng l·∫∑p trong key $key: $value")
                        }
                    }
                }
            }
            
            if (!foundData) {
                Log.d("MainActivity", "$currentAppFlavor - Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu qu√©t h·ª£p l·ªá trong intent")
            }
        }
    }

    fun sendScanDataToFlutter(scanData: String) {
        if (!isInScannerPage) {
            Log.d("MainActivity", "$currentAppFlavor - Kh√¥ng g·ª≠i d·ªØ li·ªáu v√¨ kh√¥ng ·ªü trang scanner")
            return
        }
        
        if (eventSink == null) {
            Log.e("MainActivity", "$currentAppFlavor - EventSink l√† NULL, th·ª≠ l·∫°i sau 500ms")
            // N·∫øu eventSink ch∆∞a s·∫µn s√†ng, th·ª≠ l·∫°i sau 500ms
            handler.postDelayed({
                if (eventSink != null && isInScannerPage) {
                    eventSink?.success(scanData)
                    Log.d("MainActivity", "$currentAppFlavor - ƒê√£ g·ª≠i d·ªØ li·ªáu qu√©t ƒë·∫øn Flutter (retry): $scanData")
                } else {
                    Log.e("MainActivity", "$currentAppFlavor - EventSink v·∫´n NULL ho·∫∑c kh√¥ng ·ªü trang scanner")
                }
            }, 500)
            return
        }

        handler.post {
            eventSink?.success(scanData)
            Log.d("MainActivity", "$currentAppFlavor - ƒê√£ g·ª≠i d·ªØ li·ªáu qu√©t ƒë·∫øn Flutter: $scanData")
        }
    }
}